"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapVulnerability = mapVulnerability;
exports.extractVulnerableVariable = extractVulnerableVariable;
function mapVulnerability(vulnType) {
    const normalizedType = vulnType.toLowerCase();
    const mappings = {
        'stack-buffer-overflow(write)': {
            cweId: 121,
            cweDescription: 'Stack-based Buffer Overflow',
            abstractClass: 'Buffer Overflow',
            severityScore: '9.80',
            severityLevel: 'Critical'
        },
        'heap-buffer-overflow(write)': {
            cweId: 122,
            cweDescription: 'Heap-based Buffer Overflow',
            abstractClass: 'Buffer Overflow',
            severityScore: '9.80',
            severityLevel: 'Critical'
        },
        'heap-use-after-free(read)': {
            cweId: 416,
            cweDescription: 'Use After Free',
            abstractClass: 'Memory Management Error',
            severityScore: '8.80',
            severityLevel: 'High'
        },
        'double-free': {
            cweId: 415,
            cweDescription: 'Double Free',
            abstractClass: 'Memory Management Error',
            severityScore: '8.80',
            severityLevel: 'High'
        },
        'memory-leaks': {
            cweId: 401,
            cweDescription: 'Memory Leak',
            abstractClass: 'Resource Management Error',
            severityScore: '7.50',
            severityLevel: 'Medium'
        },
        'exploitable': {
            cweId: 119,
            cweDescription: 'Improper Restriction of Operations within Bounds of Memory Buffer',
            abstractClass: 'Memory Safety',
            severityScore: '9.80',
            severityLevel: 'Critical'
        }
    };
    return mappings[normalizedType] || mappings['exploitable'];
}
function extractVulnerableVariable(report) {
    // 1. Try to extract from ASAN report
    if (report.AsanReport) {
        const asanReport = report.AsanReport.join('\n');
        // Pattern 1: "this variable: [variable]"
        const variableMatch1 = asanReport.match(/this variable:\s+\[([^\]]+)\]/);
        if (variableMatch1)
            return variableMatch1[1];
        // Pattern 2: "Address 0x... is located in stack of ... at offset ... in frame:"
        const variableMatch2 = asanReport.match(/frame:\s+([^\n]+)/);
        if (variableMatch2) {
            const frame = variableMatch2[1];
            const varMatch = frame.match(/'([^']+)'/);
            if (varMatch)
                return varMatch[1];
        }
    }
    // 2. Try to extract from source code context
    if (report.Source && report.CrashLine) {
        const crashLine = report.CrashLine.split(':')[1];
        if (crashLine) {
            const lineIndex = parseInt(crashLine) - 1;
            if (lineIndex >= 0 && report.Source[lineIndex]) {
                // Look for variable assignment in the line
                const line = report.Source[lineIndex];
                const varMatch = line.match(/(\w+)\s*[=;]/);
                if (varMatch)
                    return varMatch[1];
            }
        }
    }
    // 3. Try to extract from stack trace
    if (report.Stacktrace) {
        for (const frame of report.Stacktrace) {
            const match = frame.match(/in\s+(\w+)\s/);
            if (match)
                return match[1];
        }
    }
    return '';
}
//# sourceMappingURL=vulnerability-mapper.js.map